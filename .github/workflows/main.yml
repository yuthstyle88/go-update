name: Build & Deploy Go App

on:
  push:
    branches:
      - master     # สำหรับ prod
      - dev    # สำหรับ dev
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NAME: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
      BASE_NAME: go-updater
      APP_PORT: ${{ github.ref_name == 'master' && '8192' || '8191' }}
      LISTEN_APP_PORT: ${{ github.ref_name == 'master' && '8090' || '8089' }}
      LOCALSTACK_PORT: ${{ github.ref_name == 'master' && '4566' || '4565' }}
      APP_PATH: ${{ vars.APP_PATH }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: "1.24.0"
      - name: Set APP_NAME
        run: |
          echo "Env: ${{ github.ref_name }}"
          echo "APP_NAME=${{ env.BASE_NAME }}-${{ env.NAME }}" >> $GITHUB_ENV

      - name: 🛠️ Build app and define APP_NAME
        run: |
          mkdir -p bin
          go build -ldflags="-w -s" -o bin/${{ env.APP_NAME }}
          chmod +x bin/${{ env.APP_NAME }}
      - name: 📄 Create .env file
        run: |
          cat << EOF > .env
          APP_PORT=${{ env.APP_PORT }}
          LISTEN_APP_PORT=${{ env.LISTEN_APP_PORT }}
          ENVIRONMENT="${{ env.NAME }}"
          EOF
      - name: 📄 Create .secrets file
        run: |
          cat << EOF > .secrets
          export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
          export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          export AWS_REGION='us-east-1'
          export DYNAMODB_ENDPOINT='http://localhost:${{ env.LOCALSTACK_PORT }}'
          EOF

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: 🗝️ Add SSH host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Restart app on server (no basename)
        run : |
          # --- Stop old service (via sudo -S) ---
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e  
            cd ${{ env.APP_PATH }}
            echo "=== Restart service via systemd ==="
            if s systemctl is-active --quiet go-updater.service; then
              echo "Stopping old service..."
              s systemctl stop go-updater.service
            else
              echo "No old service running"
            fi
          EOF
          
          echo "Copy file to Server Deploy"
            scp -P ${{ secrets.SSH_PORT }} .env .secrets \
              bin/${{ env.APP_NAME }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.APP_PATH }}/ 
            ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ env.APP_PATH }}
            source .secrets
            chmod +x ${{ env.APP_NAME }}
            
            echo "Reload systemd config"
            s systemctl daemon-reload

            echo "Start or restart service..."
            s systemctl restart go-updater.service

            echo "Check status"
            s systemctl --no-pager -l status go-updater.service | head -n 30
          EOF